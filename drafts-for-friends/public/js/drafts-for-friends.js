(function( $ ) {
	'use strict';

	/**
	 * Constants
	 */
	var SECONDS_PER_MINUTE = 60;
	var SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;
	var SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;
	var HOURS_PER_DAY = 24;

	/**
	 * Replaces a template string if the form "{key}",
	 * with values form the specified object {key: 'val'}
	 *
	 * @param {string} template "vw is a {size} car"
	 * @param {Object} values {size: 'small'}
	 *
	 * @returns {string} formatted string "vw is a small call"
	 */
	function replaceTemplate( template, values ) {
		var res = template;

		if ( res ) {
			Object.keys( values ).forEach(function( k ) {
				if ( values[k] ) {
					var regexp = new RegExp('\{' + k + '\}', 'g');
					res = res.replace( regexp, values[k] );
				}
			});
		}

		return res;
	}

	/**
	 * Translates and retrieves the singular or plural form based on the
	 * supplied number, from localized script data generated by
	 * [wp_localize_script]{@link https://developer.wordpress.org/reference/functions/wp_localize_script/}
	 *
	 * @param {string} key Template key from "$l10n" object from wp_localize_script
	 * @param {string} domain "$object_name" from wp_localize_script
	 * @param {number} num The number to compare against to use either the singular or plural form
	 * @param {Object} values The key:val pairs to replace the template with
	 * @returns {string} formatted string
	 */
	function _n( key, domain, num, values ) {
		var l10n = window[domain];
		var localizedMessage;

		if ( l10n ) {
			var quantifier = (1 === num) ? 'singular' : 'plural';
			var template = l10n[key][quantifier];

			localizedMessage = replaceTemplate( template, values );
		}

		return localizedMessage;
	}

	/**
	 * Translates a template string from localized script data generated by
	 * [wp_localize_script]{@link https://developer.wordpress.org/reference/functions/wp_localize_script/}
	 *
	 * @param {string} key Template key from "$l10n" object from wp_localize_script
	 * @param {string} domain "$object_name" from wp_localize_script
	 * @param {Object} values The key:val pairs to replace the template with
	 * @returns {string} formatted string
	 */
	function __( key, domain, values ) {
		var l10n = window[domain];
		var localizedMessage;

		if ( l10n ) {
			var template = l10n[key];

			localizedMessage = replaceTemplate( template, values );
		}

		return localizedMessage;
	}

	/**
	 * Formats a time interval in seconds to a human readable form,
	 * to the 2 most significative values, if exist.
	 * e.g.:
	 *   62 -> 1 minute 2 seconds
	 *   7390 -> 2 hours and 3 minutes  (10 seconds ommited)
	 *   273790 -> 3 days and 4 hours (minutes and seconds ommited)
	 *
	 * @param {number} time Number of seconds
	 * @returns {string} Formatted interval
	 */
	function formatInterval( time ) {
		var parts = [];
		var secs  = time % 60;
		var mins  = Math.floor( time / SECONDS_PER_MINUTE ) % SECONDS_PER_MINUTE;
		var hours = Math.floor( time / SECONDS_PER_HOUR ) % HOURS_PER_DAY;
		var days  = Math.floor( time / SECONDS_PER_DAY );

		if ( secs > 0 ) {
			parts.push( _n( 'seconds', 'draftsforfriends_l10n', secs, {num: secs} ) );
		}
		if ( mins > 0 ) {
			parts.unshift( _n( 'minutes', 'draftsforfriends_l10n', mins, {num: mins} ) );
		}
		if ( hours > 0 ) {
			parts.unshift( _n( 'hours', 'draftsforfriends_l10n', hours, {num: hours} ) );
		}
		if ( days > 0 ) {
			parts.unshift( _n( 'days', 'draftsforfriends_l10n', days, {num: days} ) );
		}
		if ( parts.length > 1 ) {
			// only keep 2 most significant parts, i.e. 2 days and 3 hours, or 4 hours 5 minutes.
			return __( 'time', 'draftsforfriends_l10n', {first: parts[0], second: parts[1]} );
		}

		return parts[0];
	}

	/**
	 * Sets class "invalid" to a DOM element.
	 * Used for user feedback in form validation.
	 *
	 * @param {object} element The validated DOM element
	 */
	function markInvalid( element ) {
		element.addClass( 'invalid ');
		element.change(function() {
			if ( '' !== element.val().trim() ) {
				element.removeClass( 'invalid' );
			}
		});
	}

	/**
	 * Checks if the element value is empty in form validation,
	 * in wich case the element is marked as invalid.
	 *
	 * @param {object} element The validated DOM element
	 */
	function checkNotEmpty( element ) {
		if ( '' === element.val() ) {
			markInvalid( element );
			return false;
		}
		return true;
	}

	/**
	 * Checks if the element value is numeric in form validation,
	 * in wich case the element is marked as invalid.
	 *
	 * @param {object} element The validated DOM element
	 */
	function checkIsNumeric( element ) {
		if ( isNaN( parseInt( element.val() ) ) ) {
			markInvalid( element );
			return false;
		}
		return true;
	}

	/**
	 * Main script hook.
	 *
	 * Attaches onClick handlers to the extend forms.
	 * Attaches form validation.
	 * Inits the timer refresh on the active elements in the shared drafts table.
	 */
	function init() {
		// display extend form
		$( '.draftsforfriends .extend' ).click(function( event ) {
			event.preventDefault();
			$( this ).hide();
			$( this ).next( 'form' ).show();
		});

		// hide extend form
		$( '.draftsforfriends .cancel' ).click(function( event ) {
			event.preventDefault();
			$( this ).parent().prev( '.extend' ).show();
			$( this ).parent().hide();
		});

		// setup timers refresh
		$( '.draftsforfriends .timer' ).each(function() {
			var label = $( this );
			var time = label.data('expire');

			function updateTime( elem, time ) {
				if ( time > 0 ) {
					var timeout = 1000;
					var period = 1;

					if ( time > SECONDS_PER_HOUR ) {
						timeout *= SECONDS_PER_MINUTE;
						period *= SECONDS_PER_MINUTE;
					}

					setTimeout(function() {
						elem.text( formatInterval( time ) );
						updateTime( elem, time - period );
					}, timeout);
				} else {
					elem.text( 'Expired' );
					elem.addClass( 'expired' )
				}
			}

			updateTime( label, time );
		});

		// share form validation
		$( '#draftsforfriends-share' ).submit(function( event ) {
			var shareForm = $( this );
			var postSelect = shareForm.find( "select[name='post_id']" );
			var timeTextField = shareForm.find( "input[name='expires']" );

			return checkNotEmpty( postSelect ) &&
				checkNotEmpty( timeTextField ) &&
				checkIsNumeric( timeTextField );
		});

		// extend forms validation
		$( '.draftsforfriends .actions form' ).each(function() {
			var form = $( this );
			var timeTextField = form.find( "input[name='expires']" );

			form.submit(function( event ) {
				return checkNotEmpty( timeTextField ) && checkIsNumeric( timeTextField );
			});
		});
	}

	$( document ).ready(init);

})( jQuery );
